"""
Django settings for profiles project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
import json
import os
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-KEYNOTSET')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('NS_DEBUG', 'False').lower() == 'true'

ALLOWED_HOSTS = ['api.profiles.wprdc.org', '127.0.0.1', 'localhost']

# Application definition

INSTALLED_APPS = [
    'django.contrib.contenttypes',
    'grappelli.dashboard',
    'grappelli',
    'profiles.apps.CustomAdminConfig',
    'django.contrib.auth',
    'polymorphic',
    'corsheaders',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'django_extensions',
    'rest_framework',
    'rest_framework_gis',
    'django_filters',
    'nested_admin',
    'markdownx',
    'colorfield',

    # local apps
    'context',
    'indicators',
    'geo',
    'census_data',
    'maps',
    'parcels',

    'drf_spectacular',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'profiles.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'profiles.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'HOST': os.environ.get('NS_DB_HOST', 'db'),
        'PORT': os.environ.get('NS_DB_PORT', 5432),
        'NAME': os.environ.get('NS_DB_NAME', 'simulacrum'),
        'USER': os.environ.get('NS_DB_USER', 'simulacrum_user'),
        'PASSWORD': os.environ.get('NS_DB_PASSWORD', 'p@ssw0rd-4-d3v'),
    },
    # these environment variables must be set and kept secret, even for development
    'datastore': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'HOST': os.environ.get('NS_DATASTORE_HOST'),
        'PORT': os.environ.get('NS_DATASTORE_PORT', 5432),
        'NAME': os.environ.get('NS_DATASTORE_NAME'),
        'USER': os.environ.get('NS_DATASTORE_USER'),
        'PASSWORD': os.environ.get('NS_DATASTORE_PASSWORD'),
    },
}

DATABASE_ROUTERS = ['profiles.routers.DatastoreRouter', ]

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '127.0.0.1:11211',
    },
    'long_term': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'long_term_cache',
    }
}

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ],

    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],

    'DEFAULT_RENDERER_CLASSES': (
        'djangorestframework_camel_case.render.CamelCaseJSONRenderer',
        'djangorestframework_camel_case.render.CamelCaseBrowsableAPIRenderer',
    ),

    'DEFAULT_PARSER_CLASSES': (
        'djangorestframework_camel_case.parser.CamelCaseFormParser',
        'djangorestframework_camel_case.parser.CamelCaseMultiPartParser',
        'djangorestframework_camel_case.parser.CamelCaseJSONParser',
    ),
    'JSON_UNDERSCOREIZE': {
        'no_underscore_before_number': True,
    },
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 100,
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend', ],

    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.AcceptHeaderVersioning',

    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

DATA_UPLOAD_MAX_NUMBER_FIELDS = None

INTERNAL_IPS = '127.0.0.1'

SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Profiles customization settings
# ```````````````````````````````
AVAILABLE_COUNTIES_IDS = ('42073', '42003', '42007', '42125', '42059',
                          '42051', '42129', '42063', '42005', '42019',)

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

AVAILABLE_GEOG_TYPES = (
    'blockGroup',
    'tract',
    'countySubdivision',
    # 'schoolDistrict',
    'county',
    'neighborhood',
    'zcta',
)

SQ_ALIAS = 'dt'
GEO_ALIAS = '"GEO"'

ID_DKEY = '__id__'
GEOG_DKEY = '__geog__'
TIME_DKEY = '__time__'
VALUE_DKEY = '__value__'
DENOM_DKEY = '__denom__'

VIEW_CACHE_TTL = 0  # 60 mins

LONG_TERM_CACHE_TTL = 0  # 60 * 60 * 24  # 24 hours

USE_LONG_TERM_CACHE = False

APPEND_SLASH = True

SPECTACULAR_SETTINGS = {
    'TITLE': 'WPRDC Neighborhood Simulacrum',
    'DESCRIPTION': 'API for neighborhood indicators and other civic open data.',
    'VERSION': '0.0.1',
}

GRAPPELLI_INDEX_DASHBOARD = {
    'django.contrib.admin.site': 'profiles.dashboard.CustomIndexDashboard',
    'profiles.admin.CustomAdminSite': 'profiles.dashboard.CustomIndexDashboard',
}

MAP_HOST = 'https://api.profiles.wprdc.org/tiles/'

MAP_STYLES = {
    'BORDER_LAYER_BASE': {
        "type": "line",
        "paint": {
            "line-color": "#000",
            "line-width": [
                "interpolate",
                ["exponential", 1.51],
                ["zoom"],
                0, 1,
                8, 4,
                16, 14
            ]
        },
    }
}

LOGS_DIR = os.path.join(BASE_DIR, 'logs')

CKAN_HOST = 'https://data.wprdc.org'

CKAN_API_BASE_URL = os.path.join(CKAN_HOST, 'api', '3')

CKAN_DEFAULT_GEOM_FIELD = '_geom'
CKAN_DEFAULT_GEOM_WEBMERCATOR_FIELD = '_the_geom_webmercator'
CKAN_DEFAULT_ID_FIELD = '_id'
CKAN_DEFAULT_IMAGE_FIELD = 'image'

VERSION = '0.0.1'

USER_AGENT = f'wprdcprofiles/{VERSION} (+https://profiles.wprdc.org)'

DATASTORE_SEARCH_SQL_ENDPOINT = 'action/datastore_search_sql'

TILE_SERVER_URL = 'https://api.profiles.wprdc.org/tiles'
MAPS_SCHEMA = 'maps'

CORS_ALLOWED_ORIGINS = json.loads(os.environ.get('NS_CORS_ALLOWED_ORIGINS', '["https://profiles.wprdc.org"]'))

CORS_ALLOW_CREDENTIALS = True
